# -*- coding: utf-8 -*-
"""PráticaMS1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/179yCGd_BMLGcl5bIdDnSl2CHnpLNgGqF
"""

from scipy.special import stdtrit
import numpy as np
import pandas as pd
import os
import time
import math

def Inicializar(df):
  evento = 'Inicio'
  cliente = '-'

  relogio = 0

  horario_saida1 = float('INF')
  horario_saida2 = float('INF')
  horario_chegada = 0

  estado_servidor = 0 # 0 significa ocioso, 1 significa ocupado
  tamanho_fila = 0

  df[0] = [evento, cliente, relogio, estado_servidor, tamanho_fila, horario_chegada, horario_saida1, horario_saida2]
  #df = np.vstack([df,row])
  return df

def exponential(l):
  U = np.random.uniform()
  #print(U)
  #print(l)
  return ((-1/l)*math.log(1-U)) * 100
  

def normal (a,b):
  U = np.random.uniform()
  return (a + (b-a)*U)*100

#EVENTO | CLIENTE | RELOGIO| ESTADO_SERVIDOR| TAMANHO_FILA| HORARIO_CHEGADA| HORARIO_SAIDA|
def evento_chegada(df, count, next_client, max_fila, var_tec, var_ts, clientes_sistema, As = 0, Bs = 0, Aec = 0, Bec = 0, lec = 0, ls = 0):
  evento = 'Chegada'
  cliente = next_client
  relogio = df[count][5]#Horario Chegada
  estado_servidor = df[count][3]
  tamanho_fila = df[count][4]
  horario_saida1 = df[count][6]
  horario_saida2 = df[count][7]

  if clientes_sistema == 1:
    estado_servidor = 0.5
  elif clientes_sistema > 1:
    estado_servidor = 1
  elif clientes_sistema == 0:
    estado_servidor = 0


  if float(df[count][3]) == 0 or float(df[count][3]) == 0.5: #Estado Servidor
    if var_ts == 1:
      tempo_servico = exponential(ls)
    else:
      tempo_servico = normal(As,Bs)

    horario_saida = float(relogio) + float(tempo_servico)
  else:
    if clientes_sistema > 2:
      tamanho_fila = int(tamanho_fila) + 1
  
  
  if var_tec == 1:
    tempo_chegada = exponential(lec)
  else:
    tempo_chegada = normal(Aec,Bec)

  horario_chegada = float(relogio) + float(tempo_chegada)


  if float(df[count][6]) == float('INF'):
    horario_saida1 = horario_saida
  elif float(df[count][7]) == float('INF'):
    horario_saida2 = horario_saida  
  
  row = [evento,cliente,relogio,estado_servidor,tamanho_fila,horario_chegada,horario_saida1, horario_saida2]
  
  df = np.vstack([df,row])
  next_client = next_client+1

  return df,next_client

#EVENTO | CLIENTE | RELOGIO| ESTADO_SERVIDOR| TAMANHO_FILA| HORARIO_CHEGADA| HORARIO_SAIDA|
def evento_saida(df, count, last_client, var_tec, var_ts, clientes_sistema, As = 0, Bs = 0, Aec = 0, Bec = 0, lec = 0, ls = 0):
  evento = 'Saida'
  relogio = min(float(df[count][6]), float(df[count][7]))
  tamanho_fila = df[count][4]
  horario_chegada = df[count][5]
  horario_saida1 = df[count][6]
  horario_saida2 = df[count][7]
  estado_servidor = df[count][3]
  cliente = last_client
  if int(tamanho_fila) > 0 :
    tamanho_fila = int(tamanho_fila) -1
    
    if var_ts == 1:
      tempo_servico = exponential(ls)
    else:
      tempo_servico = normal(As,Bs)

    horario_saida = float(relogio) + float(tempo_servico)

  else:
    if clientes_sistema == 1:
      estado_servidor = 0.5
    elif clientes_sistema == 0:
      estado_servidor = 0

    horario_saida = float('INF')


  if df[count][6] <= df[count][7]:
    horario_saida1 = horario_saida
  else:
    horario_saida2 = horario_saida

  row = [evento,cliente,relogio,estado_servidor,tamanho_fila,horario_chegada,horario_saida1, horario_saida2]
  df = np.vstack([df,row])
  last_client = last_client+1

  return df,last_client


def num_med_fila(df):# OK
  somatorio = 0
  total = float(df[-1][2])
  tempo = 0
  
  for i in range(len(df)):
    if not(float(df[i][6]) == float('INF') and float(df[i][6]) == float('INF')):
        tempo = float(df[i+1][2])-float(df[i][2])

    tamanho_fila = int(df[i][4])
    somatorio = somatorio+tempo*tamanho_fila
    tempo = 0
    
  media = somatorio/total
  return media

def taxa_media_ocup_servidores(df):
  somatorio = 0
  total = float(df[-1][2])
  tempo = 0

  for i in range(len(df)):
    if not(float(df[i][6]) == float('INF') and float(df[i][7]) == float('INF')):
        tempo = float(df[i+1][2])-float(df[i][2])

    estado_servidor = float(df[i][3])
    somatorio = somatorio + tempo*estado_servidor
    tempo = 0
  
  media = somatorio/total
  return media

def tempo_medio_sistema(df):#OK

  aux_chegada = []
  aux_saida = []
  total = int(df[-1][1])
  somatorio = 0
  count = 0


  for i in range(len(df)):
    if df[i][0] == 'Chegada':
      aux_chegada.append(df[i][2])


  for i in range(len(df)):
    if df[i][0] == 'Saida':
      aux_saida.append(df[i][2])


  if len(aux_chegada) != len(aux_saida):
    print('Error')
    return None

  for i in range(len(aux_chegada)):
    somatorio = somatorio + float(aux_saida[i]) - float(aux_chegada[i])
  
  if total == 0:
    return '-'


  media = somatorio/total

  return media

def tempo_medio_fila(df):#OK
  aux_chegada = []
  aux_saida = []
  total = int(df[-1][1])
  somatorio = 0
  count = 0

  for i in range(len(df)):
    if float(df[i][4]) > 0 and df[i][0] == 'Chegada':
      j = i+1
      while j < len(df):
        if df[j][0] == "Saida":
          count = count + 1

        if count == float(df[i][4]):
          tempo =  float(df[j][2]) - float(df[i][2])
          somatorio = somatorio + tempo
          count = 0
          break
        j = j +1

  media = somatorio/total

  return media

def mostrar_estatisticas(df):

  print('Numero medio de entidades na fila: ',num_med_fila(df))
  print('Taxa media de ocupaçãão do servidor: ',taxa_media_ocup_servidores(df))
  print('Tempo medio despendido no sistema: ',tempo_medio_sistema(df))
  print('Tempo medio despendido na fila: ',tempo_medio_fila(df))

def variancia(valores, media):
  somatorio = 0
  for valor in valores:
    somatorio = somatorio + math.pow(valor-media, 2)

  return somatorio / (len(valores))


#-----------------------------------------------------MENU------------------------------------------------------------------------------------------
#Declaração Variáveis Básicas
print("Bem Vindo!")
print('Por favor Insira os Dados Referentes a Maneira que a Simulação Ocorrerá:')
print(' ')
print('--------------------------------------------------------------')

#----------------------------------------------------Tempo Entre Chegadas---------------------------------------------------------------------------
print('Escolha a distribuição de tempo entre chegadas: ')
print('1 - Exponencial')
print('2 - Normal')
var_tec = int(input())

if var_tec == 1:
  lec = float(input('Insira o valor de Lambda: '))####
else:
  Aec = float(input('Insira o valor de A: '))
  Bec = float(input('Insira o valor de B: '))
#--------------------------------------------------------------Tempo Servico------------------------------------------------------------------------
print('--------------------------------------------------------------')
print('Tempo Servico: ')
print('1 - Exponencial')
print('2 - Normal')

var_ts = int(input())

if var_ts == 1:
  ls = float(input('Insira o valor de Mi: '))####
else:
  As = float(input('Insira o valor de A: '))
  Bs = float(input('Insira o valor de B: '))
#---------------------------------------------------------------Tamanho Fila ---------------------------------------------------------------------
print('--------------------------------------------------------------')
print('Tamanho Maximo da Fila: ')
print('1 - Infinito')
print('2 - Finito')

var_fila = int(input())

if var_fila == 1:
  max_fila = float('INF')
else:
  if var_fila == 2:
    max_fila = float(input('Insira o Tamanho Maximo da Fila: '))

#----------------------------------------------------------------Maximo Iterações-------------------------------------------------------------------
print('--------------------------------------------------------------')
print('Insira quantas iterations devem ser realizadas: ')
iterations = int(input())

#-----------------------------------------------------------------Intervalo desejado ----------------------------------------------------------------
print("")
print('--------------------------------------------------------------')
alpha = float(input("Insira o grau de confiança desejado: "))
h_desejado = float(input("Insira o valor de h desejado: "))

#----------------------------------------------------------------Main--------------------------------------------------------------------------------
replications = 100

while True:
  num_fila = np.zeros((replications), dtype = np.float64)
  tx_ocup = np.zeros((replications), dtype = np.float64)
  tempo_med_sistema = np.zeros((replications), dtype = np.float64)
  tempo_med_fila = np.zeros((replications), dtype = np.float64)

  for k in range(replications):
    last_client = 1
    next_client = 1
    count = 0
    clientes_sistema = 0
    columns = ['|Evento |', 'Cliente |','Relogio |','Estado Servidor |','Tamanho Fila |','Horario Chegada |','Horario Saida 1 |', 'Horario Saida 2 |'] 
    df = np.zeros((1,8), dtype = object)
    df = Inicializar(df)

    while count<int(iterations):
      if (float(df[count][5]) < float(df[count][6]) and float(df[count][5]) < float(df[count][7])) and int(df[count][4]) < max_fila:  
          clientes_sistema = clientes_sistema + 1

          if var_tec == 1 and var_ts == 1:
            df, next_client = evento_chegada(df, count, next_client, max_fila, var_tec, var_ts, clientes_sistema, ls = ls, lec = lec)
          elif var_tec == 1 and var_ts > 1:
            df, next_client = evento_chegada(df, count, next_client, max_fila, var_tec, var_ts, clientes_sistema, lec = lec, As = As, Bs = Bs)
          elif var_tec > 1 and var_ts == 1:
            df, next_client = evento_chegada(df, count, next_client, max_fila, var_tec, var_ts, clientes_sistema, ls = ls, Aec = Aec, Bec = Bec)
          elif var_tec > 1 and var_ts > 1:
            df, next_client = evento_chegada(df, count, next_client, max_fila, var_tec, var_ts, clientes_sistema, As = As, Bs = Bs, Aec = Aec, Bec = Bec)
      else:
        clientes_sistema = clientes_sistema - 1

        if var_tec == 1 and var_ts == 1:
          df, last_client = evento_saida(df, count, last_client, var_tec, var_ts, clientes_sistema, ls = ls, lec = lec)
        elif var_tec == 1 and var_ts > 1:
          df, last_client = evento_saida(df, count, last_client, var_tec, var_ts, clientes_sistema, lec = lec, As = As, Bs = Bs)
        elif var_tec > 1 and var_ts == 1:
          df, last_client = evento_saida(df, count, last_client, var_tec, var_ts, clientes_sistema, ls = ls, Aec = Aec, Bec = Bec)
        elif var_tec > 1 and var_ts > 1:
          df, last_client = evento_saida(df, count, last_client, var_tec, var_ts, clientes_sistema, As = As, Bs = Bs, Aec = Aec, Bec = Bec)
        
      count = count+1

    while not (float(df[-1][6]) == float('INF') and  float(df[-1][7]) == float('INF')) :
      clientes_sistema = clientes_sistema - 1
      if var_tec == 1 and var_ts == 1:
        df,last_client = evento_saida(df, count, last_client, var_tec, var_ts, clientes_sistema, ls = ls, lec = lec)
      elif var_tec == 1 and var_ts > 1:
        df,last_client = evento_saida(df, count, last_client, var_tec, var_ts, clientes_sistema, lec = lec, As = As, Bs = Bs)
      elif var_tec > 1 and var_ts == 1:
        df, df,last_client = evento_saida(df, count, last_client, var_tec, var_ts, clientes_sistema, ls = ls, Aec = Aec, Bec = Bec)
      elif var_tec > 1 and var_ts > 1:
        df, df,last_client = evento_saida(df, count, last_client, var_tec, var_ts, clientes_sistema, As = As, Bs = Bs, Aec = Aec, Bec = Bec)
      
      count = count+1
      
    num_fila[k] = num_med_fila(df)
    tx_ocup[k] = taxa_media_ocup_servidores(df)
    tempo_med_sistema[k] = tempo_medio_sistema(df)
    tempo_med_fila[k] = tempo_medio_fila(df)

  media_num_fila = np.mean(num_fila)
  media_tx_ocup = np.mean(tx_ocup)
  media_tempo_med_sistema = np.mean(tempo_med_sistema)
  media_tempo_med_fila = np.mean(tempo_med_fila)

  var_num_fila = variancia(num_fila, media_num_fila)
  var_tx_ocup = variancia(tx_ocup, media_num_fila)
  var_tempo_med_sistema = variancia(tempo_med_sistema, media_tempo_med_sistema)
  var_tempo_med_fila = variancia(tempo_med_fila, media_tempo_med_fila)
    
  h_num_fila = stdtrit(replications-1, 1 - (alpha/2)) * (var_num_fila / math.pow(replications, 0.5))
  h_tx_ocup = stdtrit(replications-1, 1 - (alpha/2)) * (var_tx_ocup / math.pow(replications, 0.5))
  h_tempo_med_sistema = stdtrit(replications-1, 1 - (alpha/2)) * (var_tempo_med_sistema / math.pow(replications, 0.5))
  h_tempo_med_fila = stdtrit(replications-1, 1 - (alpha/2)) * (var_tempo_med_fila / math.pow(replications, 0.5))

  h = max(h_num_fila, h_tx_ocup, h_tempo_med_sistema, h_tempo_med_fila)

  print("###################################################################")
  print("-------------------------------------------------------------------")
  print("Medias Obtidas Apos " + str(replications) + "´Replicações Com " + str((1-alpha)) + " de Confianca: ")

  print('Numero Medio de Entidades na Fila: ',media_num_fila)
  print("Intervalo De Confianca Obtido: [ " + str((media_num_fila - h_num_fila)) + "," + str((h_num_fila + media_num_fila)) + "]")
  print("Intervalo De Confianca Desejado: [ " + str((media_num_fila - h_desejado)) + "," + str((h_desejado + media_num_fila)) + "]")
  print("")

  print("Taxa Media de Ocupacao: ",media_tx_ocup)
  print("Intervalo De Confianca Obtido: [ " + str((media_tx_ocup - h_tx_ocup)) + "," + str((h_tx_ocup + media_tx_ocup)) + "]")
  print("Intervalo De Confianca Desejado: [ " + str((media_tx_ocup - h_desejado)) + "," + str((h_desejado + media_tx_ocup)) + "]")
  print("")

  print("Tempo Medio Despendido no Sistema: ",media_tempo_med_sistema)
  print("Intervalo De Confianca Obtido: [ " + str((media_tempo_med_sistema - h_tempo_med_sistema)) + "," + str((h_tempo_med_sistema + media_tempo_med_sistema)) + "]")
  print("Intervalo De Confianca Desejado: [ " + str((media_tempo_med_sistema - h_desejado)) + "," + str((h_desejado + media_tempo_med_sistema)) + "]")
  print("")

  print("Tempo Medio Gasto em Fila: ",media_tempo_med_fila)
  print("Intervalo De Confianca Obtido: [ " + str((media_tempo_med_fila - h_tempo_med_fila)) + "," + str((media_tempo_med_fila + h_tempo_med_fila)) + "]")
  print("Intervalo De Confianca Desejado: [ " + str((media_tempo_med_fila - h_desejado)) + "," + str((h_desejado + media_tempo_med_fila)) + "]")
  print("")

  print('--------------------------------------------------------------------')
  
  replications = math.ceil(replications*math.pow((h/h_desejado), 2))
  if h_num_fila < h_desejado and h_tx_ocup < h_desejado and h_tempo_med_sistema < h_desejado and h_tempo_med_fila < h_desejado:
    break